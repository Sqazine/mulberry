#pragma once
#include <vulkan/vulkan.h>
class VKFormat
{
public:
    enum _Format
    {
#define ITEM(x) x = VK_FORMAT_##x

        ITEM(UNDEFINED),
        ITEM(R4G4_UNORM_PACK8),
        ITEM(R4G4B4A4_UNORM_PACK16),
        ITEM(B4G4R4A4_UNORM_PACK16),
        ITEM(R5G6B5_UNORM_PACK16),
        ITEM(B5G6R5_UNORM_PACK16),
        ITEM(R5G5B5A1_UNORM_PACK16),
        ITEM(B5G5R5A1_UNORM_PACK16),
        ITEM(A1R5G5B5_UNORM_PACK16),
        ITEM(R8_UNORM),
        ITEM(R8_SNORM),
        ITEM(R8_USCALED),
        ITEM(R8_SSCALED),
        ITEM(R8_UINT),
        ITEM(R8_SINT),
        ITEM(R8_SRGB),

        ITEM(R8G8_UNORM),
        ITEM(R8G8_SNORM),
        ITEM(R8G8_USCALED),
        ITEM(R8G8_SSCALED),
        ITEM(R8G8_UINT),
        ITEM(R8G8_SINT),
        ITEM(R8G8_SRGB),

        ITEM(R8G8B8_UNORM),
        ITEM(R8G8B8_SNORM),
        ITEM(R8G8B8_USCALED),
        ITEM(R8G8B8_SSCALED),
        ITEM(R8G8B8_UINT),
        ITEM(R8G8B8_SINT),
        ITEM(R8G8B8_SRGB),

        ITEM(B8G8R8_UNORM),
        ITEM(B8G8R8_SNORM),
        ITEM(B8G8R8_USCALED),
        ITEM(B8G8R8_SSCALED),
        ITEM(B8G8R8_UINT),
        ITEM(B8G8R8_SINT),
        ITEM(B8G8R8_SRGB),

        ITEM(R8G8B8A8_UNORM),
        ITEM(R8G8B8A8_SNORM),
        ITEM(R8G8B8A8_USCALED),
        ITEM(R8G8B8A8_SSCALED),
        ITEM(R8G8B8A8_UINT),
        ITEM(R8G8B8A8_SINT),
        ITEM(R8G8B8A8_SRGB),

        ITEM(B8G8R8A8_UNORM),
        ITEM(B8G8R8A8_SNORM),
        ITEM(B8G8R8A8_USCALED),
        ITEM(B8G8R8A8_SSCALED),
        ITEM(B8G8R8A8_UINT),
        ITEM(B8G8R8A8_SINT),
        ITEM(B8G8R8A8_SRGB),

        ITEM(A8B8G8R8_UNORM_PACK32),
        ITEM(A8B8G8R8_SNORM_PACK32),
        ITEM(A8B8G8R8_USCALED_PACK32),
        ITEM(A8B8G8R8_SSCALED_PACK32),
        ITEM(A8B8G8R8_UINT_PACK32),
        ITEM(A8B8G8R8_SINT_PACK32),
        ITEM(A8B8G8R8_SRGB_PACK32),

        ITEM(A2R10G10B10_UNORM_PACK32),
        ITEM(A2R10G10B10_SNORM_PACK32),
        ITEM(A2R10G10B10_USCALED_PACK32),
        ITEM(A2R10G10B10_SSCALED_PACK32),
        ITEM(A2R10G10B10_UINT_PACK32),
        ITEM(A2R10G10B10_SINT_PACK32),

        ITEM(A2B10G10R10_UNORM_PACK32),
        ITEM(A2B10G10R10_SNORM_PACK32),
        ITEM(A2B10G10R10_USCALED_PACK32),
        ITEM(A2B10G10R10_SSCALED_PACK32),
        ITEM(A2B10G10R10_UINT_PACK32),
        ITEM(A2B10G10R10_SINT_PACK32),

        ITEM(R16_UNORM),
        ITEM(R16_SNORM),
        ITEM(R16_USCALED),
        ITEM(R16_SSCALED),
        ITEM(R16_UINT),
        ITEM(R16_SINT),
        ITEM(R16_SFLOAT),

        ITEM(R16G16_UNORM),
        ITEM(R16G16_SNORM),
        ITEM(R16G16_USCALED),
        ITEM(R16G16_SSCALED),
        ITEM(R16G16_UINT),
        ITEM(R16G16_SINT),
        ITEM(R16G16_SFLOAT),

        ITEM(R16G16B16_UNORM),
        ITEM(R16G16B16_SNORM),
        ITEM(R16G16B16_USCALED),
        ITEM(R16G16B16_SSCALED),
        ITEM(R16G16B16_UINT),
        ITEM(R16G16B16_SINT),
        ITEM(R16G16B16_SFLOAT),

        ITEM(R16G16B16A16_UNORM),
        ITEM(R16G16B16A16_SNORM),
        ITEM(R16G16B16A16_USCALED),
        ITEM(R16G16B16A16_SSCALED),
        ITEM(R16G16B16A16_UINT),
        ITEM(R16G16B16A16_SINT),
        ITEM(R16G16B16A16_SFLOAT),

        ITEM(R32_UINT),
        ITEM(R32_SINT),
        ITEM(R32_SFLOAT),

        ITEM(R32G32_UINT),
        ITEM(R32G32_SINT),
        ITEM(R32G32_SFLOAT),

        ITEM(R32G32B32_UINT),
        ITEM(R32G32B32_SINT),
        ITEM(R32G32B32_SFLOAT),

        ITEM(R32G32B32A32_UINT),
        ITEM(R32G32B32A32_SINT),
        ITEM(R32G32B32A32_SFLOAT),

        ITEM(R64_UINT),
        ITEM(R64_SINT),
        ITEM(R64_SFLOAT),

        ITEM(R64G64_UINT),
        ITEM(R64G64_SINT),
        ITEM(R64G64_SFLOAT),

        ITEM(R64G64B64_UINT),
        ITEM(R64G64B64_SINT),
        ITEM(R64G64B64_SFLOAT),

        ITEM(R64G64B64A64_UINT),
        ITEM(R64G64B64A64_SINT),
        ITEM(R64G64B64A64_SFLOAT),

        ITEM(B10G11R11_UFLOAT_PACK32),
        ITEM(E5B9G9R9_UFLOAT_PACK32),

        ITEM(D16_UNORM),
        ITEM(X8_D24_UNORM_PACK32),
        ITEM(D32_SFLOAT),
        ITEM(S8_UINT),
        ITEM(D16_UNORM_S8_UINT),
        ITEM(D24_UNORM_S8_UINT),
        ITEM(D32_SFLOAT_S8_UINT),
        ITEM(BC1_RGB_UNORM_BLOCK),
        ITEM(BC1_RGB_SRGB_BLOCK),
        ITEM(BC1_RGBA_UNORM_BLOCK),
        ITEM(BC1_RGBA_SRGB_BLOCK),
        ITEM(BC2_UNORM_BLOCK),
        ITEM(BC2_SRGB_BLOCK),
        ITEM(BC3_UNORM_BLOCK),
        ITEM(BC3_SRGB_BLOCK),
        ITEM(BC4_UNORM_BLOCK),
        ITEM(BC4_SNORM_BLOCK),
        ITEM(BC5_UNORM_BLOCK),
        ITEM(BC5_SNORM_BLOCK),

        ITEM(BC6H_UFLOAT_BLOCK),
        ITEM(BC6H_SFLOAT_BLOCK),
        ITEM(BC7_UNORM_BLOCK),
        ITEM(BC7_SRGB_BLOCK),
        ITEM(ETC2_R8G8B8_UNORM_BLOCK),
        ITEM(ETC2_R8G8B8_SRGB_BLOCK),
        ITEM(ETC2_R8G8B8A1_UNORM_BLOCK),
        ITEM(ETC2_R8G8B8A1_SRGB_BLOCK),
        ITEM(ETC2_R8G8B8A8_UNORM_BLOCK),
        ITEM(ETC2_R8G8B8A8_SRGB_BLOCK),
        ITEM(EAC_R11_UNORM_BLOCK),
        ITEM(EAC_R11_SNORM_BLOCK),
        ITEM(EAC_R11G11_UNORM_BLOCK),
        ITEM(EAC_R11G11_SNORM_BLOCK),
        ITEM(ASTC_4x4_UNORM_BLOCK),
        ITEM(ASTC_4x4_SRGB_BLOCK),
        ITEM(ASTC_5x4_UNORM_BLOCK),
        ITEM(ASTC_5x4_SRGB_BLOCK),
        ITEM(ASTC_5x5_UNORM_BLOCK),
        ITEM(ASTC_5x5_SRGB_BLOCK),
        ITEM(ASTC_6x5_UNORM_BLOCK),
        ITEM(ASTC_6x5_SRGB_BLOCK),
        ITEM(ASTC_6x6_UNORM_BLOCK),
        ITEM(ASTC_6x6_SRGB_BLOCK),
        ITEM(ASTC_8x5_UNORM_BLOCK),
        ITEM(ASTC_8x5_SRGB_BLOCK),
        ITEM(ASTC_8x6_UNORM_BLOCK),
        ITEM(ASTC_8x6_SRGB_BLOCK),
        ITEM(ASTC_8x8_UNORM_BLOCK),
        ITEM(ASTC_8x8_SRGB_BLOCK),
        ITEM(ASTC_10x5_UNORM_BLOCK),
        ITEM(ASTC_10x5_SRGB_BLOCK),
        ITEM(ASTC_10x6_UNORM_BLOCK),
        ITEM(ASTC_10x6_SRGB_BLOCK),
        ITEM(ASTC_10x8_UNORM_BLOCK),
        ITEM(ASTC_10x8_SRGB_BLOCK),
        ITEM(ASTC_10x10_UNORM_BLOCK),
        ITEM(ASTC_10x10_SRGB_BLOCK),
        ITEM(ASTC_12x10_UNORM_BLOCK),
        ITEM(ASTC_12x10_SRGB_BLOCK),
        ITEM(ASTC_12x12_UNORM_BLOCK),
        ITEM(ASTC_12x12_SRGB_BLOCK),
        ITEM(G8B8G8R8_422_UNORM),
        ITEM(B8G8R8G8_422_UNORM),
        ITEM(G8_B8_R8_3PLANE_420_UNORM),
        ITEM(G8_B8R8_2PLANE_420_UNORM),
        ITEM(G8_B8_R8_3PLANE_422_UNORM),
        ITEM(G8_B8R8_2PLANE_422_UNORM),
        ITEM(G8_B8_R8_3PLANE_444_UNORM),
        ITEM(R10X6_UNORM_PACK16),
        ITEM(R10X6G10X6_UNORM_2PACK16),
        ITEM(R10X6G10X6B10X6A10X6_UNORM_4PACK16),
        ITEM(G10X6B10X6G10X6R10X6_422_UNORM_4PACK16),
        ITEM(B10X6G10X6R10X6G10X6_422_UNORM_4PACK16),
        ITEM(G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16),
        ITEM(G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16),
        ITEM(G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16),
        ITEM(G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16),
        ITEM(G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16),
        ITEM(R12X4_UNORM_PACK16),
        ITEM(R12X4G12X4_UNORM_2PACK16),
        ITEM(R12X4G12X4B12X4A12X4_UNORM_4PACK16),
        ITEM(G12X4B12X4G12X4R12X4_422_UNORM_4PACK16),
        ITEM(B12X4G12X4R12X4G12X4_422_UNORM_4PACK16),
        ITEM(G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16),
        ITEM(G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16),
        ITEM(G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16),
        ITEM(G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16),
        ITEM(G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16),
        ITEM(G16B16G16R16_422_UNORM),
        ITEM(B16G16R16G16_422_UNORM),
        ITEM(G16_B16_R16_3PLANE_420_UNORM),
        ITEM(G16_B16R16_2PLANE_420_UNORM),
        ITEM(G16_B16_R16_3PLANE_422_UNORM),
        ITEM(G16_B16R16_2PLANE_422_UNORM),
        ITEM(G16_B16_R16_3PLANE_444_UNORM),
        ITEM(G8_B8R8_2PLANE_444_UNORM),
        ITEM(G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16),
        ITEM(G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16),
        ITEM(G16_B16R16_2PLANE_444_UNORM),
        ITEM(A4R4G4B4_UNORM_PACK16),
        ITEM(A4B4G4R4_UNORM_PACK16),
        ITEM(ASTC_4x4_SFLOAT_BLOCK),
        ITEM(ASTC_5x4_SFLOAT_BLOCK),
        ITEM(ASTC_5x5_SFLOAT_BLOCK),
        ITEM(ASTC_6x5_SFLOAT_BLOCK),
        ITEM(ASTC_6x6_SFLOAT_BLOCK),
        ITEM(ASTC_8x5_SFLOAT_BLOCK),
        ITEM(ASTC_8x6_SFLOAT_BLOCK),
        ITEM(ASTC_8x8_SFLOAT_BLOCK),
        ITEM(ASTC_10x5_SFLOAT_BLOCK),
        ITEM(ASTC_10x6_SFLOAT_BLOCK),
        ITEM(ASTC_10x8_SFLOAT_BLOCK),
        ITEM(ASTC_10x10_SFLOAT_BLOCK),
        ITEM(ASTC_12x10_SFLOAT_BLOCK),
        ITEM(ASTC_12x12_SFLOAT_BLOCK),
        ITEM(PVRTC1_2BPP_UNORM_BLOCK_IMG),
        ITEM(PVRTC1_4BPP_UNORM_BLOCK_IMG),
        ITEM(PVRTC2_2BPP_UNORM_BLOCK_IMG),
        ITEM(PVRTC2_4BPP_UNORM_BLOCK_IMG),
        ITEM(PVRTC1_2BPP_SRGB_BLOCK_IMG),
        ITEM(PVRTC1_4BPP_SRGB_BLOCK_IMG),
        ITEM(PVRTC2_2BPP_SRGB_BLOCK_IMG),
        ITEM(PVRTC2_4BPP_SRGB_BLOCK_IMG),
#undef ITEM
    };

    VKFormat(VkFormat fmt)
        : mHandle(_Format(fmt))
    {
    }

    VKFormat(_Format fmt)
        : mHandle(fmt)
    {
    }
    VKFormat(const Format &fmt)
    {
        mHandle = fmt.mHandle;
    }
    VKFormat(Format &&fmt)
    {
        mHandle = fmt.mHandle;
    }
    ~VKFormat()
    {
    }
    VKFormat &operator=(const Format &other)
    {
        mHandle = other.mHandle;
        return *this;
    }
    VKFormat &operator=(_Format other)
    {
        mHandle = other;
        return *this;
    }
    _Format GetHandle() const
    {
        return mHandle;
    }
    VkFormat ToVkHandle() const
    {
        return (VkFormat)mHandle;
    }

    bool HasStencil()
    {
        return mHandle == Format::D32_SFLOAT_S8_UINT ||
               mHandle == Format::D24_UNORM_S8_UINT ||
               mHandle == Format::D16_UNORM_S8_UINT ||
               mHandle == Format::S8_UINT;
    }

private:
    _Format mHandle;
};

inline bool operator==(const VKFormat &fmt1, VKFormat::_Format fmt2)
{
    return fmt1.GetHandle() == fmt2;
}
inline bool operator==(VKFormat::_Format fmt1, const VKFormat &fmt2)
{
    return fmt2 == fmt1;
}
inline bool operator==(const VKFormat &fmt1, const VKFormat &fmt2)
{
    return fmt1.GetHandle() == fmt2.GetHandle();
}
inline bool operator==(VkFormat fmt1, const VKFormat &fmt2)
{
    return (VKFormat::_Format)fmt1 == fmt2.GetHandle();
}
inline bool operator==(const VKFormat &fmt1, VkFormat fmt2)
{
    return fmt2 == fmt1;
}
inline bool operator==(VkFormat fmt1, const VKFormat::_Format &fmt2)
{
    return (VKFormat::_Format)fmt1 == fmt2;
}
inline bool operator==(const VKFormat::_Format &fmt1, VkFormat fmt2)
{
    return fmt2 == fmt1;
}
